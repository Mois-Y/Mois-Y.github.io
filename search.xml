<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue学习（二）</title>
      <link href="/2020/06/28/vue-xue-xi-er/"/>
      <url>/2020/06/28/vue-xue-xi-er/</url>
      
        <content type="html"><![CDATA[<h3>1.1 过滤器：</h3><h4>在js中使用filters设置，运用‘item|过滤器’</h4><h3>1.2 v-model：</h3><h4>v-model指令可以实现表单元素和数据的双向绑定，如：动态得到输入框(input、textarea)的值</h4><h4>v-model其实是一个语法糖，它的背后本质上是包含两个操作：</h4>    <li>1.v-bind绑定一个value属性，得到值</li>    <li>2.v-on指令给当前元素绑定input事件，监听值的改变</li><pre><code>&lt;input type&#x3D;&quot;text&quot; v-bind:value&#x3D;&quot;message&quot; v-on:input&#x3D;&quot;message &#x3D; $event.target.value&quot;&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6语法（来自b站课件）</title>
      <link href="/2020/06/27/es6-yu-fa-lai-zi-b-zhan-ke-jian/"/>
      <url>/2020/06/27/es6-yu-fa-lai-zi-b-zhan-ke-jian/</url>
      
        <content type="html"><![CDATA[<img src="/img/ES601.png"><img src="/img/ES602.png"><img src="/img/ES603.png">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端基础知识总结</title>
      <link href="/2020/05/12/qian-duan-ji-chu-zhi-shi-zong-jie/"/>
      <url>/2020/05/12/qian-duan-ji-chu-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4>JavaScript面试题</h4><a>https://segmentfault.com/a/1190000015288700</a>]]></content>
      
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 学习（一）</title>
      <link href="/2020/05/12/vue-xue-xi-yi/"/>
      <url>/2020/05/12/vue-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="//cdn.bootcss.com/highlight.js/9.2.0/styles/github.min.css"><script src="//cdn.bootcss.com/highlight.js/9.2.0/highlight.min.js"></script><style>.d-list{    font-size: 15pt;    display:list-item;    list-style-position: inside;    list-style-type: circle;}</style><h1>一、认识Vuejs</h1><h3>1.1 Vue是一个渐进式的框架。</h3><h4> 1.1.1 渐进式：</h4><div class="d-list">渐进式意味着你可以将Vue作为你应用的一部分嵌入其中，带来更丰富的交互体验。</div><div class="d-list">或者如果你希望将更多的业务逻辑使用Vue实现，那么Vue的核心库以及其生态系统。</div><div class="d-list">比如Core+Vue-router+Vuex，也可以满足你各种各样的需求。</div><h3>1.2 第一个Vue实例</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    &#x2F;&#x2F;let（变量）&#x2F;const（常量）    &#x2F;&#x2F;编程范式：声明式编程    const app &#x3D; new Vue({        el: &#39;#app&#39;,&#x2F;&#x2F;用于挂载要管理的元素        data: {&#x2F;&#x2F;定义数据            message: &#39;你好！&#39;        }    })    &#x2F;&#x2F;元素js的做法（编程范式：命令式编程）    &#x2F;&#x2F;1.创建div元素，设置id属性    &#x2F;&#x2F;2.定义一个message变量    &#x2F;&#x2F;3.将message变量放在前面的div元素中显示    &#x2F;&#x2F;4.修改message数据，并替换&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><h3>1.3 第二个Vue实例-列表</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;app&quot;&gt;    &lt;ul&gt;        &lt;li v-for&#x3D;&quot;item in movies&quot;&gt;&lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    const app &#x3D; new Vue({        el: &#39;#app&#39;,        data: {            messages: &#39;你好啊&#39;,            movies: [&#39;魔界契约&#39;, &#39;海王&#39;, &#39;哪吒&#39;, &#39;盗墓笔记&#39;]        }    })&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><h3>1.4 第三个Vue实例-计数器</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;app&quot;&gt;    &lt;h2&gt;当前计数：&lt;&#x2F;h2&gt;    &lt;!--    v-on监听--&gt;    &lt;!--    &lt;button v-on:click&#x3D;&quot;counter++&quot;&gt;+&lt;&#x2F;button&gt;--&gt;    &lt;!--    &lt;button v-on:click&#x3D;&quot;counter&amp;#45;&amp;#45;&quot;&gt;-&lt;&#x2F;button&gt;--&gt;    &lt;button v-on:click&#x3D;&quot;add&quot;&gt;+&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;sub&quot;&gt;-&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    &#x2F;&#x2F;语法糖：简写 @click是v-on:click的语法糖    const app &#x3D; new Vue({        el: &#39;#app&#39;,        data: {            counter: &#39;0&#39;        },        methods: {            add: function () {                console.log(&#39;add被执行&#39;)                this.counter++            },            sub: function () {                console.log(&#39;sub被执行&#39;)                this.counter--            }        }    })&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><h3>1.5 MVVM</h3><h4>Model View ViewModel</h4><ul>View层：<li>视图层</li><li>在我们前端开发中，通常就是DOM层。</li><li>主要的作用是给用户展示各种信息。</li></ul><ul>Model层：<li>数据层</li><li>数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据。</li><li>在我们计数器的案例中，就是后面抽取出来的obj，当然，里面的数据可能没有这么简单。</li></ul><ul>VueModel层：<li>视图模型层</li><li>视图模型层是View和Model沟通的桥梁。</li><li>一方面它实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中</li><li>另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件(点击、滚动、touch等)时，可以监听到，并在需要的情况下改变对应的Data。</li></ul><h3>1.6 开发中什么是函数，什么是方法？</h3><li>函数：function，直接在script里面定义 </li><li>方法：method，一般定义在类里面</li><h3>1.7 vue的生命周期</h3>初始化->更新->死亡<img src="/img/pic01.png"><h3>1.8 模板语法</h3><h4>1.8.1 Mustache语法（双括号）:可以使用简单的表达式</h4><h4>1.8.2 v-once:只渲染一次，之后不会随数据更改，并且后面不跟表达式</h4><h4>1.8.3 v-html：设置有标签的超链接</h4><h4>1.8.4 v-text：类似于Mustache语法，但不可拼接，使用较少</h4><h4>1.8.5 v-pre：原封不动的显示标签内的内容，不用解析</h4><h4>1.8.6 v-cloak：在vue解析之前有效，避免显然出未编译的Mustache标签</h4><h4>1.8.7 v-bind：</h4> <li class="d-list">动态绑定链接属性</li> <li class="d-list">语法糖：':'</li> <li class="d-list">动态绑定class可使用对象、数组绑定</li> <li class="d-list">动态绑定style可使用对象、数组绑定</li><h3>1.9 计算属性</h3><h4>1.9.1 计算属性的定义：</h4><h5>把数据进行一些转化后再显示，或者把多个数据结合起来进行显示</h5><h4>1.9.2 计算属性的案例：</h4><h5>案例一：firstName+lastName</h5><h5>案例二：books->price</h5><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;计算属性复杂操作&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;app&quot;&gt;    &lt;h2&gt;总价格：&lt;&#x2F;h2&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    const app &#x3D; new Vue({        el: &#39;#app&#39;,        data: {            books: [                {id: 110, name: &#39;Vue框架&#39;, price: 120},                {id: 111, name: &#39;一行代码&#39;, price: 69},                {id: 112, name: &#39;操作系统&#39;, price: 100},                {id: 113, name: &#39;代码大全&#39;, price: 70}            ]        },        &#x2F;&#x2F;computed计算属性        computed: {            totalPrice: function () {                let result &#x3D; 0                for (let i &#x3D; 0; i &lt; this.books.length; i++) {                    result +&#x3D; this.books[i].price                }                return result            }        },        methods: {}    })&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><h5>计算属性完整写法：</h5><pre><code>&lt;script&gt;    const app &#x3D; new Vue({        el: &#39;#app&#39;,        data: {            firstName: &#39;jerry&#39;,            lastName: &#39;tom&#39;        },        &#x2F;&#x2F;computed计算属性        &#x2F;&#x2F; 属性一般没有set方法，只读属性        computed: {            fullName: {                set: function (newValue) {                    &#x2F;&#x2F; 截取拿到结果的字符串并赋值                    const name &#x3D; newValue.split(&#39; &#39;)                    this.firstName &#x3D; name[0]                    this.lastName &#x3D; name[1]                },                get: function () {                    return this.firstName+&#39; &#39;+this.lastName                }            }        },        methods: {}    })&lt;&#x2F;script&gt;</code></pre><h4>1.9.3 计算属性的缓存：</h4><h5>计算属性性能比方法更高，因为计算属性有缓存，执行时只调用一次，而方法用几次调用几次</h5><h3>1.10 事件监听</h3><h4>1.10.1 v-on</h4><h5>定义：绑定事件监听器，语法糖为'@监听事件'</h5><h4>1.10.2 v-on参数问题</h4><li>情况一：如果该方法不需要额外参数，那么方法后的()可以不添加。</li><li>但是注意：如果方法本身中有一个参数，那么会默认将原生事件event参数传递进去</li><li>情况二：如果需要同时传入某个参数，同时需要event时，可以通过$event传入事件。</li><h4>1.10.3 v-on修饰符</h4><li>.stop:阻止冒泡</li><li>.prevent:阻止默认事件，如自动提交</li><li>.{keyCode | keyAlias}:监听某个键盘按键的点击，如：‘input type="text" v-on:keyup.enter="keyUp"（点击enter键，松开时触发）’</li><li>.native:监听组件根元素的原生事件。</li><li>.once:只触发一次回调。</li><h4>1.10.4 v-if和v-show区别</h4><h5>v-if当条件为false时，压根不会有对应的元素在DOM中。</h5><h5>v-show当条件为false时，仅仅是将元素的display属性设置为none而已。</h5><h5>当需要在显示与隐藏之间切片很频繁时，使用v-show</h5><h5>当只有一次切换时，通过使用v-if</h5><h4>1.10.5 遍历循环</h4>使用v-for时最好加上key，为了更好的复用<h5>1.10.5.1 遍历数组</h5><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;v-for遍历数组&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;app&quot;&gt;    &lt;!--    1.在遍历的过程中，没有使用索引值--&gt;    &lt;ul&gt;        &lt;li v-for&#x3D;&quot;item in names&quot;&gt;&lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;    &lt;!--    2.在遍历的过程中，获取索引值--&gt;    &lt;ul&gt;        &lt;li v-for&#x3D;&quot;(item,index) in names&quot;&gt;NaN.&lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    const app &#x3D; new Vue({        el: &#39;#app&#39;,        data: {            names: [&#39;why&#39;, &#39;Mois&#39;, &#39;Tom&#39;, &#39;Jerry&#39;]        }    })&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><h5>1.10.5.2 遍历对象</h5><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;v-for遍历对象&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;app&quot;&gt;    &lt;!--    1.在遍历的过程中，如果只是获取一个值，那么获取的是value--&gt;    &lt;ul&gt;        &lt;li v-for&#x3D;&quot;item in info&quot;&gt;&lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;    &lt;!--    2.获取key和value （value，key）--&gt;    &lt;ul&gt;        &lt;li v-for&#x3D;&quot;(item,key) in info&quot;&gt;:&lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;&lt;!--    3.获取key、value和index--&gt;    &lt;ul&gt;        &lt;li v-for&#x3D;&quot;(item,key,index) in info&quot;&gt;:-&lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    const app &#x3D; new Vue({        el: &#39;#app&#39;,        data: {            info: {                name: &#39;Mois&#39;,                age: 20,                height: 1.88            }        }    })&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><h5>1.10.5.3 v-for中最好加入key，但key不能是index（index会有变化）</h5><img src="/img/v-forKey.png"><h4>1.10.6 响应方法</h4>观察数组编译的方法，使用它们改变数组也会触发视图的更新。<li>push():在数组后面添加元素，可添加多个</li><li>pop()：删除最后一个元素</li><li>shift()：删除第一个元素</li><li>unshift()：在数组最前面添加元素，可添加多个</li><li>5.splice():删除元素、插入元素、替换元素</li>               删除元素,splice(开始位置,删除几个元素),<br>               删除元素splice(开始位置),删除除开始位置后的元素<br>               替换元素，splice(start，替换几个元素，‘替换的元素’，‘替换的元素’)<br>               插入元素,splice(开始元素,0，‘插入的元素’，‘插入的元素’)<br><li>sort()：排序</li><li>reverse()：反转</li><h3>1.11 书籍购物车的案例</h3><h5>index.html</h5><pre><code>&lt;!DOCTYPE html&gt;&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;style.css&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;app&quot;&gt;    &lt;div v-if&#x3D;&quot;books.length&quot;&gt;        &lt;table&gt;            &lt;thead&gt;            &lt;tr&gt;                &lt;th&gt;&lt;&#x2F;th&gt;                &lt;th&gt;书籍名称&lt;&#x2F;th&gt;                &lt;th&gt;出版日期&lt;&#x2F;th&gt;                &lt;th&gt;价格&lt;&#x2F;th&gt;                &lt;th&gt;购买数量&lt;&#x2F;th&gt;                &lt;th&gt;操作&lt;&#x2F;th&gt;            &lt;&#x2F;tr&gt;            &lt;&#x2F;thead&gt;            &lt;tbody&gt;            &lt;tr v-for&#x3D;&quot;(book,index) in books&quot;&gt;                &lt;td&gt;book.id&lt;&#x2F;td&gt;                &lt;td&gt;book.name&lt;&#x2F;td&gt;                &lt;td&gt;book.data&lt;&#x2F;td&gt;                &lt;td&gt;book.price|showPrice&lt;&#x2F;td&gt;                &lt;td&gt;                    &lt;button @click&#x3D;&quot;decrement(index)&quot; v-bind:disabled&#x3D;&quot;book.count&lt;&#x3D;1&quot;&gt;-&lt;&#x2F;button&gt;                    &lt;button @click&#x3D;&quot;increment(index)&quot;&gt;+&lt;&#x2F;button&gt;                &lt;&#x2F;td&gt;                &lt;td&gt;                    &lt;button @click&#x3D;&quot;removeHandler(index)&quot;&gt;移除&lt;&#x2F;button&gt;                &lt;&#x2F;td&gt;            &lt;&#x2F;tr&gt;            &lt;&#x2F;tbody&gt;        &lt;&#x2F;table&gt;        &lt;h2&gt;总价格：totalPrice|showPrice&lt;&#x2F;h2&gt;    &lt;&#x2F;div&gt;    &lt;div v-else&gt;        &lt;h2&gt;购物车为空&lt;&#x2F;h2&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;main.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><br><h5>main.js</h5><pre><code>const app &#x3D; new Vue({    el: &#39;#app&#39;,    data: {        books: [            {                id: 1,                name: &#39;《算法导论》&#39;,                data: &#39;2019-03-12&#39;,                price: 89.00,                count: 1            },            {                id: 2,                name: &#39;《UNIX编程艺术》&#39;,                data: &#39;2018-07-13&#39;,                price: 49.00,                count: 5            },            {                id: 3,                name: &#39;《编程珠玑》&#39;,                data: &#39;2020-01-12&#39;,                price: 85.00,                count: 11            },            {                id: 4,                name: &#39;《代码大全》&#39;,                data: &#39;2020-03-22&#39;,                price: 109.00,                count: 2            },        ]    },    methods: {        &#x2F;&#x2F;价格格式化        getFinalPrice(price) {            return &#39;¥&#39; + price.toFixed(2)        },        increment(index) {            this.books[index].count++        },        decrement(index) {            this.books[index].count--        },        removeHandler(index) {            this.books.splice(index, 1)        }    },    &#x2F;&#x2F; 计算属性    computed: {        totalPrice() {            let totalPrice &#x3D; 0            &#x2F;&#x2F;1.普通for循环            for (let i &#x3D; 0; i &lt; this.books.length; i++) {                totalPrice +&#x3D; this.books[i].price * this.books[i].count            }            return totalPrice            &#x2F;&#x2F; 2.for(let i in this.books)            &#x2F;&#x2F;3.for(let i in&#x2F;of this.books)        }    },    &#x2F;&#x2F;过滤器    filters: {        showPrice(price) {            return &#39;¥&#39; + price.toFixed(2)        }    }})</code></pre><br><h5>style.css</h5><pre><code>table {    border: 1px solid #e9e9e9;    border-collapse: collapse;    border-spacing: 0;}th, td {    padding: 8px 16px;    border: 1px solid #e9e9e9;    text-align: left;}th {    background-color: #f7f7f7;    color: #5c6b77;    font-weight: 600;}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客</title>
      <link href="/2020/05/11/my-new-post/"/>
      <url>/2020/05/11/my-new-post/</url>
      
        <content type="html"><![CDATA[<p>这是我第二篇博客</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/11/hello-world/"/>
      <url>/2020/05/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

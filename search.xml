<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES6语法（来自b站课件）</title>
      <link href="/2020/06/27/es6-yu-fa-lai-zi-b-zhan-ke-jian/"/>
      <url>/2020/06/27/es6-yu-fa-lai-zi-b-zhan-ke-jian/</url>
      
        <content type="html"><![CDATA[<img src="/img/ES601.png"><img src="/img/ES602.png"><img src="/img/ES603.png">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端基础知识总结</title>
      <link href="/2020/05/12/qian-duan-ji-chu-zhi-shi-zong-jie/"/>
      <url>/2020/05/12/qian-duan-ji-chu-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4>JavaScript面试题</h4><a>https://segmentfault.com/a/1190000015288700</a>]]></content>
      
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 学习（一）</title>
      <link href="/2020/05/12/vue-xue-xi-yi/"/>
      <url>/2020/05/12/vue-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="//cdn.bootcss.com/highlight.js/9.2.0/styles/github.min.css"><script src="//cdn.bootcss.com/highlight.js/9.2.0/highlight.min.js"></script><style>.d-list{    font-size: 15pt;    display:list-item;    list-style-position: inside;    list-style-type: circle;}</style><h1>一、认识Vuejs</h1><h3>1.1 Vue是一个渐进式的框架。</h3><h4> 1.1.1 渐进式：</h4><div class="d-list">渐进式意味着你可以将Vue作为你应用的一部分嵌入其中，带来更丰富的交互体验。</div><div class="d-list">或者如果你希望将更多的业务逻辑使用Vue实现，那么Vue的核心库以及其生态系统。</div><div class="d-list">比如Core+Vue-router+Vuex，也可以满足你各种各样的需求。</div><h3>1.2 第一个Vue实例</h3><figure class="highlight plain"><figcaption><span>[] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs language"><code class="language-hljs language"><!DOCTYPE html><br><html lang&#x3D;"en"><br><head><br>    <meta charset&#x3D;"UTF-8"><br>    <title>Title<&#x2F;title><br><&#x2F;head><br><body><br><div id&#x3D;"app"><&#x2F;div><br><script src&#x3D;"..&#x2F;js&#x2F;vue.js"><&#x2F;script><br><script><br>    &#x2F;&#x2F;let（变量）&#x2F;const（常量）<br>    &#x2F;&#x2F;编程范式：声明式编程<br>    const app &#x3D; new Vue(&#123;<br>        el: '#app',&#x2F;&#x2F;用于挂载要管理的元素<br>        data: &#123;&#x2F;&#x2F;定义数据<br>            message: '你好！'<br>        &#125;<br>    &#125;)<br>    &#x2F;&#x2F;元素js的做法（编程范式：命令式编程）<br>    &#x2F;&#x2F;1.创建div元素，设置id属性<br>    &#x2F;&#x2F;2.定义一个message变量<br>    &#x2F;&#x2F;3.将message变量放在前面的div元素中显示<br>    &#x2F;&#x2F;4.修改message数据，并替换<br><&#x2F;script><br><&#x2F;body><br><&#x2F;html><br></code></pre></td></tr></table></figure><h3>1.3 第二个Vue实例-列表</h3><figure class="highlight plain"><figcaption><span>[] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class=" language-hljs language"><code class="language-hljs language"><!DOCTYPE html><br><html lang&#x3D;"en"><br><head><br>    <meta charset&#x3D;"UTF-8"><br>    <title>Title<&#x2F;title><br><&#x2F;head><br><body><br><div id&#x3D;"app"><br>    <ul><br>        <li v-for&#x3D;"item in movies"><&#x2F;li><br>    <&#x2F;ul><br><&#x2F;div><br><script src&#x3D;"..&#x2F;js&#x2F;vue.js"><&#x2F;script><br><script><br>    const app &#x3D; new Vue(&#123;<br>        el: '#app',<br>        data: &#123;<br>            messages: '你好啊',<br>            movies: ['魔界契约', '海王', '哪吒', '盗墓笔记']<br>        &#125;<br>    &#125;)<br><br><&#x2F;script><br><&#x2F;body><br><&#x2F;html><br></code></pre></td></tr></table></figure><h3>1.4 第三个Vue实例-计数器</h3><figure class="highlight plain"><figcaption><span>[] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre class=" language-hljs language"><code class="language-hljs language"><!DOCTYPE html><br><html lang&#x3D;"en"><br><head><br>    <meta charset&#x3D;"UTF-8"><br>    <title>Title<&#x2F;title><br><&#x2F;head><br><body><br><div id&#x3D;"app"><br>    <h2>当前计数：<&#x2F;h2><br>    <!--    v-on监听--><br>    <!--    <button v-on:click&#x3D;"counter++">+<&#x2F;button>--><br>    <!--    <button v-on:click&#x3D;"counter&#45;&#45;">-<&#x2F;button>--><br>    <button v-on:click&#x3D;"add">+<&#x2F;button><br>    <button @click&#x3D;"sub">-<&#x2F;button><br><&#x2F;div><br><script src&#x3D;"..&#x2F;js&#x2F;vue.js"><&#x2F;script><br><script><br>    &#x2F;&#x2F;语法糖：简写 @click是v-on:click的语法糖<br>    const app &#x3D; new Vue(&#123;<br>        el: '#app',<br>        data: &#123;<br>            counter: '0'<br>        &#125;,<br>        methods: &#123;<br>            add: function () &#123;<br>                console.log('add被执行')<br>                this.counter++<br>            &#125;,<br>            sub: function () &#123;<br>                console.log('sub被执行')<br>                this.counter--<br>            &#125;<br>        &#125;<br>    &#125;)<br><br><&#x2F;script><br><&#x2F;body><br><&#x2F;html><br></code></pre></td></tr></table></figure><h3>1.5 MVVM</h3><h4>Model View ViewModel</h4><ul>View层：<li>视图层</li><li>在我们前端开发中，通常就是DOM层。</li><li>主要的作用是给用户展示各种信息。</li></ul><ul>Model层：<li>数据层</li><li>数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据。</li><li>在我们计数器的案例中，就是后面抽取出来的obj，当然，里面的数据可能没有这么简单。</li></ul><ul>VueModel层：<li>视图模型层</li><li>视图模型层是View和Model沟通的桥梁。</li><li>一方面它实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中</li><li>另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件(点击、滚动、touch等)时，可以监听到，并在需要的情况下改变对应的Data。</li></ul><h3>1.6 开发中什么是函数，什么是方法？</h3><li>函数：function，直接在script里面定义 </li><li>方法：method，一般定义在类里面</li><h3>1.7 vue的生命周期</h3>初始化->更新->死亡<img src="/img/pic01.png"><h3>1.8 模板语法</h3><h4>1.8.1 Mustache语法（双括号）:可以使用简单的表达式</h4><h4>1.8.2 v-once:只渲染一次，之后不会随数据更改，并且后面不跟表达式</h4><h4>1.8.3 v-html：设置有标签的超链接</h4><h4>1.8.4 v-text：类似于Mustache语法，但不可拼接，使用较少</h4><h4>1.8.5 v-pre：原封不动的显示标签内的内容，不用解析</h4><h4>1.8.6 v-cloak：在vue解析之前有效，避免显然出未编译的Mustache标签</h4><h4>1.8.7 v-bind：</h4> <li class="d-list">动态绑定链接属性</li> <li class="d-list">语法糖：':'</li> <li class="d-list">动态绑定class可使用对象、数组绑定</li> <li class="d-list">动态绑定style可使用对象、数组绑定</li><h3>1.9 计算属性</h3><h4>1.9.1 计算属性的定义：</h4><h5>把数据进行一些转化后再显示，或者把多个数据结合起来进行显示</h5><h4>1.9.2 计算属性的案例：</h4><h5>案例一：firstName+lastName</h5><h5>案例二：books->price</h5><figure class="highlight plain"><figcaption><span>[] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre class=" language-hljs language"><code class="language-hljs language"><!DOCTYPE html><br><html lang&#x3D;"en"><br><head><br>    <meta charset&#x3D;"UTF-8"><br>    <title>计算属性复杂操作<&#x2F;title><br><&#x2F;head><br><body><br><div id&#x3D;"app"><br>    <h2>总价格：<&#x2F;h2><br><&#x2F;div><br><script src&#x3D;"..&#x2F;js&#x2F;vue.js"><&#x2F;script><br><script><br>    const app &#x3D; new Vue(&#123;<br>        el: '#app',<br>        data: &#123;<br>            books: [<br>                &#123;id: 110, name: 'Vue框架', price: 120&#125;,<br>                &#123;id: 111, name: '一行代码', price: 69&#125;,<br>                &#123;id: 112, name: '操作系统', price: 100&#125;,<br>                &#123;id: 113, name: '代码大全', price: 70&#125;<br>            ]<br>        &#125;,<br>        &#x2F;&#x2F;computed计算属性<br>        computed: &#123;<br>            totalPrice: function () &#123;<br>                let result &#x3D; 0<br>                for (let i &#x3D; 0; i < this.books.length; i++) &#123;<br>                    result +&#x3D; this.books[i].price<br>                &#125;<br>                return result<br>            &#125;<br>        &#125;,<br>        methods: &#123;&#125;<br>    &#125;)<br><&#x2F;script><br><&#x2F;body><br><&#x2F;html><br></code></pre></td></tr></table></figure><h5>计算属性完整写法：</h5><figure class="highlight plain"><figcaption><span>[] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class=" language-hljs language"><code class="language-hljs language"><script><br>    const app &#x3D; new Vue(&#123;<br>        el: '#app',<br>        data: &#123;<br>            firstName: 'jerry',<br>            lastName: 'tom'<br>        &#125;,<br>        &#x2F;&#x2F;computed计算属性<br>        &#x2F;&#x2F; 属性一般没有set方法，只读属性<br>        computed: &#123;<br>            fullName: &#123;<br>                set: function (newValue) &#123;<br>                    &#x2F;&#x2F; 截取拿到结果的字符串并赋值<br>                    const name &#x3D; newValue.split(' ')<br>                    this.firstName &#x3D; name[0]<br>                    this.lastName &#x3D; name[1]<br>                &#125;,<br>                get: function () &#123;<br>                    return this.firstName+' '+this.lastName<br>                &#125;<br>            &#125;<br>        &#125;,<br>        methods: &#123;&#125;<br>    &#125;)<br><&#x2F;script><br></code></pre></td></tr></table></figure><h4>1.9.3 计算属性的缓存：</h4><h5>计算属性性能比方法更高，因为计算属性有缓存，执行时只调用一次，而方法用几次调用几次</h5><h3>1.10 事件监听</h3><h4>1.10.1 v-on</h4><h5>定义：绑定事件监听器，语法糖为'@监听事件'</h5><h4>1.10.2 v-on参数问题</h4><li>情况一：如果该方法不需要额外参数，那么方法后的()可以不添加。</li><li>但是注意：如果方法本身中有一个参数，那么会默认将原生事件event参数传递进去</li><li>情况二：如果需要同时传入某个参数，同时需要event时，可以通过$event传入事件。</li><h4>1.10.3 v-on修饰符</h4><li>.stop:阻止冒泡</li><li>.prevent:阻止默认事件，如自动提交</li><li>.{keyCode | keyAlias}:监听某个键盘按键的点击，如：‘input type="text" v-on:keyup.enter="keyUp"（点击enter键，松开时触发）’</li><li>.native:监听组件根元素的原生事件。</li><li>.once:只触发一次回调。</li><h4>1.10.4 v-if和v-show区别</h4><h5>v-if当条件为false时，压根不会有对应的元素在DOM中。</h5><h5>v-show当条件为false时，仅仅是将元素的display属性设置为none而已。</h5><h5>当需要在显示与隐藏之间切片很频繁时，使用v-show</h5><h5>当只有一次切换时，通过使用v-if</h5><h4>1.10.5 遍历循环</h4>使用v-for时最好加上key，为了更好的复用<h5>1.10.5.1 遍历数组</h5><figure class="highlight plain"><figcaption><span>[] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre class=" language-hljs language"><code class="language-hljs language"><!DOCTYPE html><br><html lang&#x3D;"en"><br><head><br>    <meta charset&#x3D;"UTF-8"><br>    <title>v-for遍历数组<&#x2F;title><br><&#x2F;head><br><body><br><div id&#x3D;"app"><br>    <!--    1.在遍历的过程中，没有使用索引值--><br>    <ul><br>        <li v-for&#x3D;"item in names"><&#x2F;li><br>    <&#x2F;ul><br>    <!--    2.在遍历的过程中，获取索引值--><br>    <ul><br>        <li v-for&#x3D;"(item,index) in names">NaN.<&#x2F;li><br>    <&#x2F;ul><br><&#x2F;div><br><script src&#x3D;"..&#x2F;js&#x2F;vue.js"><&#x2F;script><br><script><br>    const app &#x3D; new Vue(&#123;<br>        el: '#app',<br>        data: &#123;<br>            names: ['why', 'Mois', 'Tom', 'Jerry']<br>        &#125;<br>    &#125;)<br><&#x2F;script><br><&#x2F;body><br><&#x2F;html><br></code></pre></td></tr></table></figure><h5>1.10.5.2 遍历对象</h5><figure class="highlight plain"><figcaption><span>[] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre class=" language-hljs language"><code class="language-hljs language"><!DOCTYPE html><br><html lang&#x3D;"en"><br><head><br>    <meta charset&#x3D;"UTF-8"><br>    <title>v-for遍历对象<&#x2F;title><br><&#x2F;head><br><body><br><div id&#x3D;"app"><br>    <!--    1.在遍历的过程中，如果只是获取一个值，那么获取的是value--><br>    <ul><br>        <li v-for&#x3D;"item in info"><&#x2F;li><br>    <&#x2F;ul><br>    <!--    2.获取key和value （value，key）--><br>    <ul><br>        <li v-for&#x3D;"(item,key) in info">:<&#x2F;li><br>    <&#x2F;ul><br><!--    3.获取key、value和index--><br>    <ul><br>        <li v-for&#x3D;"(item,key,index) in info">:-<&#x2F;li><br>    <&#x2F;ul><br><&#x2F;div><br><script src&#x3D;"..&#x2F;js&#x2F;vue.js"><&#x2F;script><br><script><br>    const app &#x3D; new Vue(&#123;<br>        el: '#app',<br>        data: &#123;<br>            info: &#123;<br>                name: 'Mois',<br>                age: 20,<br>                height: 1.88<br>            &#125;<br>        &#125;<br>    &#125;)<br><&#x2F;script><br><&#x2F;body><br><&#x2F;html><br></code></pre></td></tr></table></figure><h5>1.10.5.3 v-for中最好加入key，但key不能是index（index会有变化）</h5><img src="/img/v-forKey.png"><h4>1.10.6 响应方法</h4>观察数组编译的方法，使用它们改变数组也会触发视图的更新。<li>push():在数组后面添加元素，可添加多个</li><li>pop()：删除最后一个元素</li><li>shift()：删除第一个元素</li><li>unshift()：在数组最前面添加元素，可添加多个</li><li>5.splice():删除元素、插入元素、替换元素</li>               删除元素,splice(开始位置,删除几个元素),<br>               删除元素splice(开始位置),删除除开始位置后的元素<br>               替换元素，splice(start，替换几个元素，‘替换的元素’，‘替换的元素’)<br>               插入元素,splice(开始元素,0，‘插入的元素’，‘插入的元素’)<br><li>sort()：排序</li><li>reverse()：反转</li><h3>1.11 书籍购物车的案例：</h3><h5>index.html</h5><figure class="highlight html"><figcaption><span>[] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword"><code class="language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>></span><br><br></code></pre></td></tr></table></figure><br><h5>main.js</h5><figure class="highlight plain"><figcaption><span>[] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre class=" language-hljs language"><code class="language-hljs language">const app &#x3D; new Vue(&#123;<br>    el: '#app',<br>    data: &#123;<br>        books: [<br>            &#123;<br>                id: 1,<br>                name: '《算法导论》',<br>                data: '2019-03-12',<br>                price: 89.00,<br>                count: 1<br>            &#125;,<br>            &#123;<br>                id: 2,<br>                name: '《UNIX编程艺术》',<br>                data: '2018-07-13',<br>                price: 49.00,<br>                count: 5<br>            &#125;,<br>            &#123;<br>                id: 3,<br>                name: '《编程珠玑》',<br>                data: '2020-01-12',<br>                price: 85.00,<br>                count: 11<br>            &#125;,<br>            &#123;<br>                id: 4,<br>                name: '《代码大全》',<br>                data: '2020-03-22',<br>                price: 109.00,<br>                count: 2<br>            &#125;,<br>        ]<br>    &#125;,<br>    methods: &#123;<br>        &#x2F;&#x2F;价格格式化<br>        getFinalPrice(price) &#123;<br>            return '¥' + price.toFixed(2)<br>        &#125;,<br>        increment(index) &#123;<br>            this.books[index].count++<br>        &#125;,<br>        decrement(index) &#123;<br>            this.books[index].count--<br>        &#125;,<br>        removeHandler(index) &#123;<br>            this.books.splice(index, 1)<br>        &#125;<br>    &#125;,<br>    &#x2F;&#x2F; 计算属性<br>    computed: &#123;<br>        totalPrice() &#123;<br>            let totalPrice &#x3D; 0<br>            for (let i &#x3D; 0; i < this.books.length; i++) &#123;<br>                totalPrice +&#x3D; this.books[i].price * this.books[i].count<br>            &#125;<br>            return totalPrice<br>        &#125;<br>    &#125;,<br>    &#x2F;&#x2F;过滤器<br>    filters: &#123;<br>        showPrice(price) &#123;<br>            return '¥' + price.toFixed(2)<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br><h5>style.css</h5><figure class="highlight plain"><figcaption><span>[] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs language"><code class="language-hljs language">table &#123;<br>    border: 1px solid #e9e9e9;<br>    border-collapse: collapse;<br>    border-spacing: 0;<br>&#125;<br><br>th, td &#123;<br>    padding: 8px 16px;<br>    border: 1px solid #e9e9e9;<br>    text-align: left;<br>&#125;<br><br>th &#123;<br>    background-color: #f7f7f7;<br>    color: #5c6b77;<br>    font-weight: 600;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客</title>
      <link href="/2020/05/11/my-new-post/"/>
      <url>/2020/05/11/my-new-post/</url>
      
        <content type="html"><![CDATA[<p>这是我第二篇博客</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/11/hello-world/"/>
      <url>/2020/05/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ hexo new <span class="hljs-string"><code class="language-hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
